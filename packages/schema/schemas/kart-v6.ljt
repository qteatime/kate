% ljt/0
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

schema "KART" version 6

// == Informational: not encoded with LJT
// type Cartridge {
//    field files: <size: uint32, data: raw-bytes>[]
//    field metadata: Metadata;
//    field header: Header;
// }

// == Information for parsing the cartridge
type Header {
  field minimum-kate-version: Kate-version;
  field metadata-location: Binary-location;
  field content-location: Binary-location;
}

// == Information for handling the cartridge's contents
type Metadata {
  field identification: Meta-identification;
  field presentation: Meta-presentation;
  field classification: Meta-classification;
  field legal: Meta-legal;
  field accessibility: Meta-accessibility;
  field security: Security;
  field runtime: Runtime;
  field files: Meta-file[];
  field signature: Signature[];
}

type Meta-identification {
  field id: Text;
  field version: Version;
  field release-date: Date;
}

type Meta-presentation {
  field title: Text;
  field author: Text;
  field tagline: Text;
  field description: Text;
  field release-type: Release-type;
  field thumbnail-path: Text?;
  field banner-path: Text?;
}

type Meta-classification {
  field genre: Genre[];
  field tags: Text[];
  field rating: Content-rating;
  field warnings: Text?;
}

type Meta-legal {
  field derivative-policy: Derivative-policy;
  field licence-path: Text?;
  field privacy-policy-path: Text?;
}

type Meta-accessibility {
  field input-methods: Input-method[];
  field languages: Language[];
  field provisions: Accessibility-provision[];
  field average-completion-seconds: Uint32?;
  field average-session-seconds: Uint32?;
}

// == Information for assessing cartridge risks
type Security {
  field capabilities: Capability[];
}

// == Information for running the cartridge
union Runtime {
  type Web-archive {
    field html-path: Text;
    field bridges: Bridge[];
  }
}

// == Additional content stored in a cartridge
type Meta-file {
  field path: Text;
  field mime: Text;
  field integrity: Raw-bytes;
  field hash-algorithm: Hash-algorithm;
  field offset: Uint64;
  field size: Uint32;
}

// == Signature blocks
type Signature {
  field signed-by: Text;
  field key-id: Text;
  field signature: Raw-bytes;
}

// -- Supporting types ------------------------------------------------
type Version {
  field major: Uint32;
  field minor: Uint32;
}

type Kate-version {
  field major: Uint32;
  field minor: Uint32;
  field patch: Uint32;
}

type Binary-location {
  field offset: Uint64;
  field size: Uint64;
}

type Date {
  field year: Uint32;
  field month: Uint8;
  field day: Uint8;
}

union Genre {
  type Not-specified {}
  type Action {}
  type Platformer {}
  type Shooter {}
  type Racing {}
  type Fighting {}
  type Rhythm {}
  type Adventure {}
  type Interactive-fiction {}
  type Visual-novel {}
  type Puzzle {}
  type RPG {}
  type Simulation {}
  type Strategy {}
  type Sports {}
  type Tool {}
  type Other {}
}

union Content-rating {
  type General {}
  type Teen-and-up {}
  type Mature {}
  type Explicit {}
  type Unknown {}
}

union Release-type {
  type Prototype {}
  type Early-access {}
  type Beta {}
  type Demo {}
  type Regular {}
  type Unofficial {}
}

union Derivative-policy {
  type Not-allowed {}
  type Personal-use {}
  type Non-commercial-use {}
  type Commercial-use {}
}

union Input-method {
  type Buttons {}
  type Pointer {}
}

type Language {
  field iso-code: Text;
  field interface: Boolean;
  field audio: Boolean;
  field text: Boolean;
}

union Accessibility-provision {
  type High-contrast {}
  type Subtitles {}
  type Image-captions {}
  type Voiced-text {}
  type Configurable-difficulty {}
  type Skippable-content {}
}

union Bridge {
  type Network-proxy {}

  type Local-storage-proxy {}

  // @deprecated
  type Input-proxy {
    field mapping: Virtual-key -> Keyboard-key;
  }

  type Preserve-WebGL-render {}

  type Capture-canvas {
    field selector: Text;
  }

  type Pointer-input-proxy {
    field selector: Text;
    field hide-cursor: Boolean;
  }

  type IndexedDB-proxy {
    field versioned: Boolean;
  }

  type Renpy-web-tweaks {
    field version: Version;
  }

  type External-URL-handler {}

  type Keyboard-input-proxy-v2 {
    field mapping: Virtual-key -> Keyboard-key;
    field selector: Keyboard-input-selector;
  }

  type Network-proxy-v2 {
    field allow-sync-access: Text[];
  }
}

union Virtual-key {
  type Up {}
  type Right {}
  type Down {}
  type Left {}
  type Menu {}
  type Capture {}
  type X {}
  type O {}
  type L-trigger {}
  type R-trigger {}
  type Berry {}
  type Sparkle {}
}

type Keyboard-key {
  field code: Text;
}

union Capability {
  type Contextual {
    field capability: Contextual-capability;
    field reason: Text;
  }
  type Passive {
    field capability: Passive-capability;
    field optional: Boolean;
    field reason: Text;
  }
}

union Contextual-capability {
  // medium risk: data exfiltration, privacy concerns
  type Open-URLs {}

  // high risk: security, privacy, escalation concerns
  type Request-device-files {}

  // critical risk: security, privacy, escalation concerns
  type Install-cartridges {}

  // critical risk: security, escalation concerns
  type Download-files {}

  // low risk: annoyance, denial-of-service
  type Show-dialogs {}

  // medium risk: leaking developer identities
  type View-developer-profile {}

  // medium-risk: leaking developer identities
  type Sign-digitally {}
}

union Passive-capability {
  // low risk: storage degradation
  type Store-temporary-files {
    field max-size-mb: Uint32;
  }
}

union Keyboard-input-selector {
  type Window {}
  type Document {}
  type Legacy {}
  type CSS {
    field selector: Text;
  }
}

union Hash-algorithm {
  type Sha-512 {}
}